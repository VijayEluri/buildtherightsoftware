package org.eric.mignot.deployment;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;


import org.junit.Test;

import static org.junit.Assert.assertThat;
import static org.hamcrest.CoreMatchers.containsString;

public class ExternalToolsAvailabilityTest { 

	@Test public void
	gitIsPresent() {
		launchAndExpect( "git -- version", "git version 1." );
	}
	
	protected void launchAndExpect(String command, String expectedOutput) {
		try {
			Process process;
			process = Runtime.getRuntime().exec( command, null, null );
			process.waitFor();
			
			InputStream stdin = process.getInputStream();
            InputStreamReader isr = new InputStreamReader(stdin);
            BufferedReader br = new BufferedReader(isr);
            String output = "";
            String line = null;
            while ( (line = br.readLine()) != null)
                output += line + "\n";  
            System.out.println( output );
			assertThat( output, containsString( expectedOutput ) );
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
		catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public String readFile(String fileName) {
		String content = null;
		try {
			java.io.FileReader fileReader = new java.io.FileReader(fileName);
			BufferedReader reader = new BufferedReader(fileReader);
	
			StringBuffer buffer = new StringBuffer();
			String str;
			while ((str = reader.readLine()) != null) {
				buffer.append(str);
				buffer.append("\n");
			}
			content = buffer.substring( 0, buffer.length() - 1 );
			reader.close();
			fileReader.close();
		}
		catch (IOException fileDoesntExist) {
		}
		catch (StringIndexOutOfBoundsException emptyFile) {
			content = "";
		}
		return content;
	}
}
